fop <- fop %>%
mutate(surgery_dayname = weekdays(surgery_date)
,rundate_dayname = weekdays(run_date)
,daydiff = as.numeric(difftime(surgery_date,run_date,  units = "days")))
fop <- fop %>%
mutate(DOW_number = case_when( daydiff == 0 ~ '0',
daydiff <= 7 ~ '1st',
daydiff > 7 & daydiff <= 14 ~ '2nd',
daydiff > 14 & daydiff <= 21 ~ '3rd',
daydiff > 21  & daydiff <= 28 ~ '4th',
daydiff > 28 & daydiff <= 35 ~ '5th',
daydiff > 35 & daydiff <= 42 ~ '6th',
daydiff > 42 & daydiff <= 49 ~ '7th',
daydiff > 49 & daydiff <= 56 ~ '8th'),
OpenTimeGroup = case_when(open_time_slot <= 60 ~ '0-60 mins',
open_time_slot > 60 & open_time_slot <= 120 ~ '61-120 mins',
open_time_slot > 120 & open_time_slot <= 180 ~ '121-180 mins',
open_time_slot > 180 & open_time_slot <= 240 ~ '181-240 mins',
open_time_slot > 240 & open_time_slot <= 300 ~ '241-300 mins',
open_time_slot > 300 & open_time_slot <= 360 ~ '301-360 mins',
open_time_slot > 360 & open_time_slot <= 420 ~ '361-420 mins',
open_time_slot > 420 ~ '>420 mins'
),
OpenTimeGroup_Cummul = case_when(open_time_slot <= 60 ~ '0-60 mins',
open_time_slot <= 120 ~ '0-120 mins',
open_time_slot <= 180 ~ '0-180 mins',
open_time_slot <= 240 ~ '0-240 mins',
open_time_slot <= 300 ~ '0-300 mins',
open_time_slot <= 360 ~ '0-360 mins',
open_time_slot <= 420 ~ '0-420 mins',
open_time_slot > 420 ~ '>420 mins'
)
)
# change levels for factor
fop$DayDiff_Group <- factor(fop$DayDiff_Group, levels = c("0|2","3|6","7|10","11|14","15|18","19|22",">22"))
fop$OpenTimeGroup <- factor(fop$OpenTimeGroup, levels = c('0-60 mins', '61-120 mins', '121-180 mins','181-240 mins', '241-300 mins', '301-360 mins', '361-420 mins','>420 mins'))
#fop$DOW_number <- factor(fop$DOW_number, c("1st","2nd","3rd","4th","5th","6th","7th"))
#fop$surgery_dayname <- factor(fop$surgery_dayname, c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
fop$DOW_number_concat <- paste(fop$DOW_number," ",fop$surgery_dayname)
# set the working directory
#setwd("/Users/swaraajsankar/Documents/Issues/Analytics/ORDE_2336/Future Open Time/")
fop <- read.csv("merged.csv")
oper_hr <- read.csv("OperationalHours_alltenants_11-04-2021.csv")
fop = fop[fop$customer == 'uchealth',]
#fop = fop[fop$room_name == 'NEOR_04',]
#change data types
fop[['run_date']] <- mdy(fop$run_date)
fop[['surgery_date']] <- as.Date(fop$surgery_date)
fop[['OpenTime_Start']] <- as.POSIXct(fop$OpenTime_Start)
fop[['OpenTime_End']] <- as.POSIXct(fop$OpenTime_End)
oper_hr[['snapshot_date']] <- as.POSIXct(oper_hr$snapshot_date)
fop <-
fop %>%
mutate(`>90 Minutes` = case_when(`X..90` == 1 ~ open_time_slot, `X..90` == 0 ~ 0),
`>180 Minutes` = case_when(`X..180` == 1 ~ open_time_slot, `X..180` == 0 ~ 0),
`>360 Minutes` = case_when(`X..360` == 1 ~ open_time_slot, `X..360` == 0 ~ 0)
)
fop <-
fop %>%
mutate(TimeOfDay = case_when(format(OpenTime_Start, format = "%H:%M:%S") < "12:00:00" ~ "Morning",
format(OpenTime_Start, format = "%H:%M:%S") >= "12:00:00" & format(OpenTime_Start, format = "%H:%M:%S") < "16:00:00"~ "Afternoon",
format(OpenTime_Start, format = "%H:%M:%S") >= "16:00:00"~ "Evening"
))
fop <- fop %>%
mutate(surgery_dayname = weekdays(surgery_date)
,rundate_dayname = weekdays(run_date)
,daydiff = as.numeric(difftime(surgery_date,run_date,  units = "days")))
fop <- fop %>%
mutate(DOW_number = case_when( daydiff == 0 ~ '0',
daydiff <= 7 ~ '1st',
daydiff > 7 & daydiff <= 14 ~ '2nd',
daydiff > 14 & daydiff <= 21 ~ '3rd',
daydiff > 21  & daydiff <= 28 ~ '4th',
daydiff > 28 & daydiff <= 35 ~ '5th',
daydiff > 35 & daydiff <= 42 ~ '6th',
daydiff > 42 & daydiff <= 49 ~ '7th',
daydiff > 49 & daydiff <= 56 ~ '8th'),
OpenTimeGroup = case_when(open_time_slot <= 60 ~ '0-60 mins',
open_time_slot > 60 & open_time_slot <= 120 ~ '61-120 mins',
open_time_slot > 120 & open_time_slot <= 180 ~ '121-180 mins',
open_time_slot > 180 & open_time_slot <= 240 ~ '181-240 mins',
open_time_slot > 240 & open_time_slot <= 300 ~ '241-300 mins',
open_time_slot > 300 & open_time_slot <= 360 ~ '301-360 mins',
open_time_slot > 360 & open_time_slot <= 420 ~ '361-420 mins',
open_time_slot > 420 ~ '>420 mins'
),
OpenTimeGroup_Cummul = case_when(open_time_slot <= 60 ~ '0-60 mins',
open_time_slot <= 120 ~ '0-120 mins',
open_time_slot <= 180 ~ '0-180 mins',
open_time_slot <= 240 ~ '0-240 mins',
open_time_slot <= 300 ~ '0-300 mins',
open_time_slot <= 360 ~ '0-360 mins',
open_time_slot <= 420 ~ '0-420 mins',
open_time_slot > 420 ~ '>420 mins'
)
)
# change levels for factor
fop$DayDiff_Group <- factor(fop$DayDiff_Group, levels = c("0|2","3|6","7|10","11|14","15|18","19|22",">22"))
fop$OpenTimeGroup <- factor(fop$OpenTimeGroup, levels = c('0-60 mins', '61-120 mins', '121-180 mins','181-240 mins', '241-300 mins', '301-360 mins', '361-420 mins','>420 mins'))
#fop$DOW_number <- factor(fop$DOW_number, c("1st","2nd","3rd","4th","5th","6th","7th"))
#fop$surgery_dayname <- factor(fop$surgery_dayname, c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
fop$DOW_number_concat <- paste(fop$DOW_number," ",fop$surgery_dayname)
### write to csv to use in Tableau
write.csv(fop, "uchealth_modified.csv", row.names = FALSE)
Auto = read.table("Auto.data", header = TRUE, sep = "")
View(Auto)
View(Auto)
auto_model = lm(mpg ~ displacement, data = Auto)
auto_model = lm(mpg ~ displacement, data = Auto)
summary(auto_model)
auto_model = lm(mpg ~ displacement, data = Auto)
coef(auto_model)
auto_model = lm(mpg ~ displacement, data = Auto)
coef(auto_model)[1]
auto_model = lm(mpg ~ displacement, data = Auto)
coef(auto_model)[2]
auto_model = lm(mpg ~ displacement, data = Auto)
slope = round(coef(auto_model)[2],2)
auto_model = lm(mpg ~ displacement, data = Auto)
slope = round(coef(auto_model)[2],2)
summary(auto_model)
rsquared = summary(auto_model)$r_squared
rsquared = summary(auto_model)$r.squared
rsquared = round(summary(auto_model)$r.squared,2)
auto_multiple = lm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin, data = Auto)
summary(auto_multiple)
auto_multiple = lm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin, data = Auto)
#summary(auto_multiple)
coef(auto_multiple)
#summary(auto_multiple)
coef(auto_multiple)["displacement"]
auto_multiple = lm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year + origin, data = Auto)
#summary(auto_multiple)
round(coef(auto_multiple)["displacement"],2)
b0 = 50
b1 = 20
b2 = 0.07
b3 = 35
b4 = 0.01
b5 = -10
x1 = 4
x2 = 100
x3 = 1
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
b0 = 50
b1 = 20
b2 = 0.07
b3 = 35
b4 = 0.01
b5 = -10
x1 = 4
x2 = 100
x3 = 0
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
b0 = 50
b1 = 20
b2 = 0.07
b3 = 35
b4 = 0.01
b5 = -10
x1 = 3
x2 = 100
x3 = 0
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
b0 = 50
b1 = 20
b2 = 0.07
b3 = 35
b4 = 0.01
b5 = -10
x1 = 3
x2 = 100
x3 = 1
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
b0 = 50
b1 = 20
b2 = 0.07
b3 = 35
b4 = 0.01
b5 = -10
x1 = 4
x2 = 100
x3 = 0
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
b0 = 50
b1 = 20
b2 = 0.07
b3 = 35
b4 = 0.01
b5 = -10
x1 = 4
x2 = 1
x3 = 0
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
b0 = 50
b1 = 20
b2 = 7
b3 = 35
b4 = 1
b5 = -10
x1 = 4
x2 = 1
x3 = 0
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
b0 = 50
b1 = 20
b2 = 0.07
b3 = 35
b4 = 0.01
b5 = -10
x1 = 4
x2 = 100
x3 = 1
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
b0 = 50
b1 = 20
b2 = 0.07
b3 = 35
b4 = 0.01
b5 = -10
x1 = 4
x2 = 100
x3 = 1
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
b0 = 50
b1 = 20
b2 = 0.07
b3 = 35
b4 = 0.01
b5 = -10
x1 = 4
x2 = 100
x3 = 1
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
iq = 100
gpa = 4
b0 + b1*gpa + b2*iq + b3 + b4*iq*gpa + b5*gpa
y2 = (b0 + b3) + gpa(b1+b5) + b2*iq + b4*iq*gpa
iq = 100
gpa = 4
b0 + b1*gpa + b2*iq + b3 + b4*iq*gpa + b5*gpa
y2 = (b0 + b3) + gpa*(b1+b5) + b2*iq + b4*iq*gpa
iq = 100
gpa = 4
b0 + b1*gpa + b2*iq + b3 + b4*iq*gpa + b5*gpa
y2 = (b0 + b3) + gpa*(b1+b5) + b2*iq + b4*iq*gpa
w0 = b0 + b3
w1 = b1 + b5
w2 = b2
w3 = b4
y2 = w0 + gpa*w1 + iq*w2 + w3*iq*gpa
b0 = 50
b1 = 20
b2 = 0.07
b3 = 35
b4 = 0.01
b5 = -10
x1 = 4
x2 = 100
x3 = 0
x4 = x1*x2
x5 = x1*x3
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
y = b0 + b1*x1 + b2*x2 + b3*x3 + b4*x4 + b5*x5
y3 = b0 + b1*gpa + b2*iq + b3*0 + b4*iq*gpa + b5*0
y3 = b0 + b1*gpa + b2*iq + b4*iq*gpa
prostate = read.table("https://web.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data",
header = TRUE)
names(prostate)
traindata = prostate[prostate$train==TRUE,]
testdata = prostate[prostate$train==FALSE,]
dim(traindata)
dim(testdata)
prostate = read.table("https://web.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data",
header = TRUE)
names(prostate)
traindata = prostate[prostate$train==TRUE,]
testdata = prostate[prostate$train==FALSE,]
dim(traindata)
dim(testdata)
View(traindata)
new_train = traindata[-TRAIN]
new_train = traindata[-traindata$train]
View(new_train)
View(traindata)
View(new_train)
View(traindata)
View(new_train)
new_train = traindata[-c("train")]
new_train = traindata[-c(10)]
View(new_train)
train_model = lm(lpsa ~ ., data = new_train)
summary(train_model)
preds = predict(train_model, data = new_train)
preds = predict(train_model, data = testdata)
preds = predict(train_model, data = testdata)
preds = predict(train_model,testdata)
View(testdata)
mean((testdata$lpsa - predict.lm(train_model, testdata)) ^ 2)
mean((testdata$lpsa - predict(train_model, testdata)) ^ 2)
train_model = lm(lpsa ~ ., data = new_train)
mean((testdata$lpsa - predict(train_model, testdata)) ^ 2)
library(leaps)
install.packages("leaps")
library("leaps")
summary(exhaustive_model)
library("leaps")
exhaustive_model = regsubsets(lpsa~., data = new_train)
summary(exhaustive_model)
library("leaps")
forward = regsubsets(lpsa~., data = new_train, method = "forward")
summary(forward)
coef(forward)
coef(forward,7)
library("leaps")
forward = regsubsets(lpsa~., data = new_train, method = "backward")
coef(forward,7)
sum((testdata$lpsa - predict(train_model, testdata)) ^ 2)
myfit = rpart(Y~., data = mydata)
source("~/Documents/Grad School/PSL/Coding Assignments/Project 3/project_3.R", echo=TRUE)
setwd("~/Documents/Grad School/PSL/Coding Assignments/Project 3")
source("~/Documents/Grad School/PSL/Coding Assignments/Project 3/project_3.R", echo=TRUE)
source("~/Documents/Grad School/PSL/Coding Assignments/Project 3/project_3.R", echo=TRUE)
View(data)
View(test)
View(test.y)
View(testIDs)
View(train)
View(testIDs)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
predict(fit.4, newdata = data.frame(dis = 6))
source("~/.active-rstudio-document", echo=TRUE)
library(MASS)
attach(Boston)
fit.1=lm(nox~dis ,data=Boston)
fit.p=lm(nox~poly(dis),data=Boston)
fit.2=lm(nox~poly(dis ,2),data=Boston)
fit.3=lm(nox~poly(dis ,3),data=Boston)
fit.4=lm(nox~poly(dis ,4),data=Boston)
fit.5=lm(nox~poly(dis ,5),data=Boston)
fit.6=lm(nox~poly(dis ,6),data=Boston)
fit.7=lm(nox~poly(dis ,7),data=Boston)
fit.8=lm(nox~poly(dis ,8),data=Boston)
fit.9=lm(nox~poly(dis ,9),data=Boston)
fit.10=lm(nox~poly(dis ,10),data=Boston)
anova(fit.1,fit.p,fit.2,fit.3,fit.4,fit.5, fit.6, fit.7, fit.8, fit.9, fit.10)
predict(fit.2, newdata = data.frame(dis = 6))
predict(fit.4, newdata = data.frame(dis = 6))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Learning/STAT542-PSL/Project 3")
library(pROC)
# for testing purposes, needing to have source file location so we can easily move back and forth in directory
dir = getwd()
# pre-allocate list to store auc values
auc_vals = rep(0,5)
# grab the time the script starts to make calls to the mymain file
start_time = Sys.time()
for(j in 1:5){
setwd(dir)
setwd(paste("split_", j, sep=""))
source("../mymain.R")
test.y = read.table("test_y.tsv", header = TRUE)
pred = read.table("mysubmission.txt", header = TRUE)
pred = merge(pred, test.y, by="id")
roc_obj = roc(pred$sentiment, pred$prob)
auc_vals[j] = as.numeric(pROC::auc(roc_obj))
print(auc_vals[j])
}
# grab the time the script is finished so we can gather the script's elapsed time
setwd(dir)
end_time = Sys.time()
script_time = as.numeric(difftime(end_time, start_time, units = "secs"))
# write out the script time so we don't lose it
write.table(script_time, file = "script_time.txt",
row.names = FALSE, sep='\t')
# write out the auc values so we don't lose it
write.table(auc_vals, file = "auc_values.txt",
row.names = FALSE, sep='\t')
library(pROC)
# for testing purposes, needing to have source file location so we can easily move back and forth in directory
dir = getwd()
# pre-allocate list to store auc values
auc_vals = rep(0,5)
#pre-allocate list to store script_times
script_times = rep(0,5)
# grab the time the script starts to make calls to the mymain file
start_time = Sys.time()
for(j in 1:5){
setwd(dir)
setwd(paste("split_", j, sep=""))
source("../mymain.R")
test.y = read.table("test_y.tsv", header = TRUE)
pred = read.table("mysubmission.txt", header = TRUE)
pred = merge(pred, test.y, by="id")
roc_obj = roc(pred$sentiment, pred$prob)
auc_vals[j] = as.numeric(pROC::auc(roc_obj))
print(auc_vals[j])
cur_time = Sys.time()
script_time[j] = as.numeric(difftime(cur_time, start_time, units = "secs"))
}
# grab the time the script is finished so we can gather the script's elapsed time
setwd(dir)
end_time = Sys.time()
script_time = as.numeric(difftime(end_time, start_time, units = "secs"))
print(script_time)
# write out the script time so we don't lose it
write.table(script_times, file = "script_times.txt",
row.names = FALSE, sep='\t')
# write out the auc values so we don't lose it
write.table(auc_vals, file = "auc_values.txt",
row.names = FALSE, sep='\t')
script_times
library(pROC)
# for testing purposes, needing to have source file location so we can easily move back and forth in directory
dir = getwd()
# pre-allocate list to store auc values
auc_vals = rep(0,5)
#pre-allocate list to store script_times
script_times = rep(0,5)
# grab the time the script starts to make calls to the mymain file
start_time = Sys.time()
for(j in 1:5){
setwd(dir)
setwd(paste("split_", j, sep=""))
source("../mymain.R")
test.y = read.table("test_y.tsv", header = TRUE)
pred = read.table("mysubmission.txt", header = TRUE)
pred = merge(pred, test.y, by="id")
roc_obj = roc(pred$sentiment, pred$prob)
auc_vals[j] = as.numeric(pROC::auc(roc_obj))
print(auc_vals[j])
cur_time = Sys.time()
iteration_time = as.numeric(difftime(cur_time, start_time, units = "secs"))
script_time[j] = iteration_time
print(iteration_time)
}
# grab the time the script is finished so we can gather the script's elapsed time
setwd(dir)
end_time = Sys.time()
script_time = as.numeric(difftime(end_time, start_time, units = "secs"))
print(script_time)
# write out the script time so we don't lose it
write.table(script_times, file = "script_times.txt",
row.names = FALSE, sep='\t')
# write out the auc values so we don't lose it
write.table(auc_vals, file = "auc_values.txt",
row.names = FALSE, sep='\t')
?cv.glmnet()
?create_dtm()
myvocab
?write.table()
?write.table()
library(pROC)
# for testing purposes, needing to have source file location so we can easily move back and forth in directory
dir = getwd()
# pre-allocate list to store auc values
auc_vals = rep(0,5)
#pre-allocate list to store script_times
script_times = rep(0,5)
# grab the time the script starts to make calls to the mymain file
start_time = Sys.time()
for(j in 1:5){
setwd(dir)
setwd(paste("split_", j, sep=""))
source("../mymain.R")
test.y = read.table("test_y.tsv", header = TRUE)
pred = read.table("mysubmission.txt", header = TRUE)
pred = merge(pred, test.y, by="id")
roc_obj = roc(pred$sentiment, pred$prob)
auc_vals[j] = as.numeric(pROC::auc(roc_obj))
print(auc_vals[j])
cur_time = Sys.time()
iteration_time = as.numeric(difftime(cur_time, start_time, units = "secs"))
script_time[j] = iteration_time
print(iteration_time)
}
# grab the time the script is finished so we can gather the script's elapsed time
setwd(dir)
end_time = Sys.time()
script_time = as.numeric(difftime(end_time, start_time, units = "secs"))
print(script_time)
# write out the script time so we don't lose it
write.table(script_times, file = "script_times.txt",
row.names = FALSE, sep='\t')
# write out the auc values so we don't lose it
write.table(auc_vals, file = "auc_values.txt",
row.names = FALSE, sep='\t')
