}
}
B[m, ] = c(0, b)
}
y.mean
sum(B[1,])
B[1, ]
B[79, ]
Xs = t(t(X)-x.means)
Xs1 = Xs
for (i in 1:p) {
Xs[, i] = (X[, i] - mean(X[, i]))
#/ (sd(X[, i]) * sqrt((n-1)/n))
}
Xs2 = Xs
all.equal(Xs1, Xs2)
one_var_lasso = function(r, x, lam) {
xx = sum(x^2)
xr = sum(r * x)
b = (abs(xr) - lam/2)/xx
b = sign(xr) * ifelse(b > 0, b, 0)
return(b)
}
MyLasso = function(X, y, lam.seq, maxit = 500) {
# X: n-by-p design matrix without the intercept
# y: n-by-1 response vector
# lam.seq: sequence of lambda values
# maxit: number of updates for each lambda
# Center/Scale X
# Center y
n = length(y)
p = dim(X)[2]
nlam = length(lam.seq)
##############################
# YOUR CODE:
# Record the corresponding means and scales
# For example,
# y.mean = mean(y)
# Xs = centered and scaled X
##############################
y.mean = mean(y)
Xs = X
for (i in 1:p) {
Xs[, i] = (X[, i] - mean(X[, i])) / (sd(X[, i]) * sqrt((n-1)/n))
}
# x.means = colMeans(X)
# Xs = t(t(X)-x.means)
# Initilize coef vector b and residual vector r
b = rep(0, p)
r = y
B = matrix(nrow = nlam, ncol = p + 1)
# Triple nested loop
for (m in 1:nlam) {
lam = 2 * n * lam.seq[m]
for (step in 1:maxit) {
for (j in 1:p) {
r = r + (Xs[, j] * b[j])
b[j] = one_var_lasso(r, Xs[, j], lam)
r = r - Xs[, j] * b[j]
}
}
B[m, ] = c(0, b)
}
##############################
# YOUR CODE:
# Scale back the coefficients;
# Update the intercepts stored in B[, 1]
##############################
for (m in 1:nlam) {
B[m, 1] = y.mean - sum(B[m, ])
}
t(B)
}
myData = read.csv("Coding2_myData.csv")
X = as.matrix(myData[, -14])
y = myData$Y
dim(X)
lam.seq = exp(seq(-1, -8, length.out = 80))
myout = MyLasso(X, y, lam.seq, maxit = 100)
rownames(myout) = c("Intercept", colnames(X))
dim(myout)
myout
library(glmnet)
lasso.fit = glmnet(X, y, alpha = 1, lambda = lam.seq)
lasso.fit
coef(lasso.fit)
coef(lasso.fit)[, "(Intercept)"]
dim(coef(lasso.fit))
names(coef(lasso.fit))
coef(lasso.fit)["(Intercept)" ,]
myout["Intercept", ]
coef(lasso.fit)["dis", ]
myout["dis", ]
names(lasso.fit)
X = matrix(1:10, 5, 2)
v = colMeans(X)
X - v
t(t(X)-v)
library(glmnet)
lasso.fit = glmnet(X, y, alpha = 1, lambda = lam.seq)
myData = read.csv("Coding2_myData.csv")
X = as.matrix(myData[, -14])
y = myData$Y
dim(X)
library(glmnet)
lasso.fit = glmnet(X, y, alpha = 1, lambda = lam.seq)
summary(lasso.fit)
lasso.fit$beta
lasso.fit$beta["lstat", ]
X = matrix(1:10, 5, 2)
v = colMeans(X)
X - v
t(t(X)-v)
?scale()
Xs = X
for (i in 1:p) {
Xs[, i] = (X[, i] - mean(X[, i])) / (sd(X[, i]) * sqrt((n-1)/n))
}
myData = read.csv("Coding2_myData.csv")
X = as.matrix(myData[, -14])
y = myData$Y
dim(X)
Xs = X
for (i in 1:p) {
Xs[, i] = (X[, i] - mean(X[, i])) / (sd(X[, i]) * sqrt((n-1)/n))
}
all.equal(scale(X),Xs)
scale(X)
dim(scale(X))
myData = read.csv("Coding2_myData.csv")
X = as.matrix(myData[, -14])
y = myData$Y
dim(X)
one_var_lasso = function(r, x, lam) {
xx = sum(x^2)
xr = sum(r * x)
b = (abs(xr) - lam/2)/xx
b = sign(xr) * ifelse(b > 0, b, 0)
return(b)
}
MyLasso = function(X, y, lam.seq, maxit = 500) {
# X: n-by-p design matrix without the intercept
# y: n-by-1 response vector
# lam.seq: sequence of lambda values
# maxit: number of updates for each lambda
# Center/Scale X
# Center y
n = length(y)
p = dim(X)[2]
nlam = length(lam.seq)
##############################
# YOUR CODE:
# Record the corresponding means and scales
# For example,
# y.mean = mean(y)
# Xs = centered and scaled X
##############################
y.mean = mean(y)
# Xs = X
# for (i in 1:p) {
#     Xs[, i] = (X[, i] - mean(X[, i])) / (sd(X[, i]) * sqrt((n-1)/n))
# }
# x.means = colMeans(X)
# Xs = t(t(X)-x.means)
Xs = scale(X)
# Initilize coef vector b and residual vector r
b = rep(0, p)
r = y
B = matrix(nrow = nlam, ncol = p + 1)
# Triple nested loop
for (m in 1:nlam) {
lam = 2 * n * lam.seq[m]
for (step in 1:maxit) {
for (j in 1:p) {
r = r + (Xs[, j] * b[j])
b[j] = one_var_lasso(r, Xs[, j], lam)
r = r - Xs[, j] * b[j]
}
}
B[m, ] = c(0, b)
}
##############################
# YOUR CODE:
# Scale back the coefficients;
# Update the intercepts stored in B[, 1]
##############################
for (m in 1:nlam) {
B[m, 1] = y.mean - sum(B[m, ])
}
t(B)
}
one_var_lasso = function(r, x, lam) {
xx = sum(x^2)
xr = sum(r * x)
b = (abs(xr) - lam/2)/xx
b = sign(xr) * ifelse(b > 0, b, 0)
return(b)
}
lam.seq = exp(seq(-1, -8, length.out = 80))
myout = MyLasso(X, y, lam.seq, maxit = 100)
rownames(myout) = c("Intercept", colnames(X))
dim(myout)
x.index = log(lam.seq)
beta = myout[-1, ]  # beta is a 13-by-80 matrix
matplot(x.index, t(beta),
xlim = c(min(x.index), max(x.index)),
lty = 1,
xlab = "Log Lambda",
ylab = "Coefficients",
type="l",
lwd = 1)
# You can add variable names to each path
var.names = colnames(X)
nvar = length(var.names)
xpos = rep(min(x.index), nvar)
ypos = beta[, ncol(beta)]
text(xpos, ypos, var.names, cex=0.5, pos=2)
myData = read.csv("Coding2_myData.csv")
X = as.matrix(myData[, -14])
y = myData$Y
dim(X)
one_var_lasso = function(r, x, lam) {
xx = sum(x^2)
xr = sum(r * x)
b = (abs(xr) - lam/2)/xx
b = sign(xr) * ifelse(b > 0, b, 0)
return(b)
}
MyLasso = function(X, y, lam.seq, maxit = 500) {
# X: n-by-p design matrix without the intercept
# y: n-by-1 response vector
# lam.seq: sequence of lambda values
# maxit: number of updates for each lambda
# Center/Scale X
# Center y
n = length(y)
p = dim(X)[2]
nlam = length(lam.seq)
##############################
# YOUR CODE:
# Record the corresponding means and scales
# For example,
# y.mean = mean(y)
# Xs = centered and scaled X
##############################
y.mean = mean(y)
# Xs = X
# for (i in 1:p) {
#     Xs[, i] = (X[, i] - mean(X[, i])) / (sd(X[, i]) * sqrt((n-1)/n))
# }
# x.means = colMeans(X)
# Xs = t(t(X)-x.means)
Xs = scale(X)
# Initilize coef vector b and residual vector r
b = rep(0, p)
r = y
B = matrix(nrow = nlam, ncol = p + 1)
# Triple nested loop
for (m in 1:nlam) {
lam = 2 * n * lam.seq[m]
for (step in 1:maxit) {
for (j in 1:p) {
r = r + (Xs[, j] * b[j])
b[j] = one_var_lasso(r, Xs[, j], lam)
r = r - Xs[, j] * b[j]
}
}
B[m, ] = c(0, b)
}
##############################
# YOUR CODE:
# Scale back the coefficients;
# Update the intercepts stored in B[, 1]
##############################
for (m in 1:nlam) {
B[m, 1] = y.mean - sum(B[m, ])
}
t(B)
}
one_var_lasso = function(r, x, lam) {
xx = sum(x^2)
xr = sum(r * x)
b = (abs(xr) - lam/2)/xx
b = sign(xr) * ifelse(b > 0, b, 0)
return(b)
}
lam.seq = exp(seq(-1, -8, length.out = 80))
myout = MyLasso(X, y, lam.seq, maxit = 100)
rownames(myout) = c("Intercept", colnames(X))
dim(myout)
x.index = log(lam.seq)
beta = myout[-1, ]  # beta is a 13-by-80 matrix
matplot(x.index, t(beta),
xlim = c(min(x.index), max(x.index)),
lty = 1,
xlab = "Log Lambda",
ylab = "Coefficients",
type="l",
lwd = 1)
# You can add variable names to each path
var.names = colnames(X)
nvar = length(var.names)
xpos = rep(min(x.index), nvar)
ypos = beta[, ncol(beta)]
text(xpos, ypos, var.names, cex=0.5, pos=2)
library(glmnet)
lasso.fit = glmnet(X, y, alpha = 1, lambda = lam.seq)
# coef(lasso.fit)
write.csv(as.matrix(coef(lasso.fit)), file = "Coding2_lasso_coefs.csv",
row.names = FALSE)
max(abs(coef(lasso.fit) - myout))
plot(lasso.fit, xvar = "lambda")
var.names = colnames(X)
nvar = length(var.names)
xpos = rep(min(x.index), nvar)
ypos = beta[, ncol(beta)]
text(xpos, ypos, var.names, cex=0.5, pos=2)
abs(coef(lasso.fit) - myout)
one_var_lasso = function(r, x, lam) {
xx = sum(x^2)
xr = sum(r * x)
b = (abs(xr) - lam/2)/xx
b = sign(xr) * ifelse(b > 0, b, 0)
return(b)
}
lasso_sd = function (z, n) {
sd(z) * sqrt((n-1)/n)
}
MyLasso = function(X, y, lam.seq, maxit = 500) {
# X: n-by-p design matrix without the intercept
# y: n-by-1 response vector
# lam.seq: sequence of lambda values
# maxit: number of updates for each lambda
# Center/Scale X
# Center y
n = length(y)
p = dim(X)[2]
nlam = length(lam.seq)
##############################
# YOUR CODE:
# Record the corresponding means and scales
# For example,
# y.mean = mean(y)
# Xs = centered and scaled X
##############################
y.mean = mean(y)
Xs = X
# for (i in 1:p) {
#     Xs[, i] = (X[, i] - mean(X[, i])) / (sd(X[, i]) * sqrt((n-1)/n))
# }
x.column.means = colMeans(X)
x.column.sd_vals = apply(X, 2, lasso_sd, n)
Xc = t(t(X) - x.column.means)
Xs = t(t(Xc) / x.column.sd_vals)
# Initilize coef vector b and residual vector r
b = rep(0, p)
r = y
B = matrix(nrow = nlam, ncol = p + 1)
# Triple nested loop
for (m in 1:nlam) {
lam = 2 * n * lam.seq[m]
for (step in 1:maxit) {
for (j in 1:p) {
r = r + (Xs[, j] * b[j])
b[j] = one_var_lasso(r, Xs[, j], lam)
r = r - Xs[, j] * b[j]
}
}
B[m, ] = c(0, b)
}
##############################
# YOUR CODE:
# Scale back the coefficients;
# Update the intercepts stored in B[, 1]
##############################
for (m in 1:nlam) {
B[m, 1] = y.mean - sum(B[m, ])
}
t(B)
}
myData = read.csv("Coding2_myData.csv")
X = as.matrix(myData[, -14])
y = myData$Y
dim(X)
lam.seq = exp(seq(-1, -8, length.out = 80))
n = length(y)
p = dim(X)[2]
nlam = length(lam.seq)
##############################
# YOUR CODE:
# Record the corresponding means and scales
# For example,
# y.mean = mean(y)
# Xs = centered and scaled X
##############################
y.mean = mean(y)
Xs = X
# for (i in 1:p) {
#     Xs[, i] = (X[, i] - mean(X[, i])) / (sd(X[, i]) * sqrt((n-1)/n))
# }
x.column.means = colMeans(X)
x.column.sd_vals = apply(X, 2, lasso_sd, n)
Xc = t(t(X) - x.column.means)
Xs = t(t(Xc) / x.column.sd_vals)
dim(Xs)
B
B[, -1]
myData = read.csv("Coding2_myData.csv")
X = as.matrix(myData[, -14])
y = myData$Y
dim(X)
one_var_lasso = function(r, x, lam) {
xx = sum(x^2)
xr = sum(r * x)
b = (abs(xr) - lam/2)/xx
b = sign(xr) * ifelse(b > 0, b, 0)
return(b)
}
lasso_sd = function (z, n) {
sd(z) * sqrt((n-1)/n)
}
MyLasso = function(X, y, lam.seq, maxit = 500) {
# X: n-by-p design matrix without the intercept
# y: n-by-1 response vector
# lam.seq: sequence of lambda values
# maxit: number of updates for each lambda
# Center/Scale X
# Center y
n = length(y)
p = dim(X)[2]
nlam = length(lam.seq)
##############################
# YOUR CODE:
# Record the corresponding means and scales
# For example,
# y.mean = mean(y)
# Xs = centered and scaled X
##############################
y.mean = mean(y)
Xs = X
# for (i in 1:p) {
#     Xs[, i] = (X[, i] - mean(X[, i])) / (sd(X[, i]) * sqrt((n-1)/n))
# }
x.column.means = colMeans(X)
x.column.sd_vals = apply(X, 2, lasso_sd, n)
Xc = t(t(X) - x.column.means)
Xs = t(t(Xc) / x.column.sd_vals)
# Initilize coef vector b and residual vector r
b = rep(0, p)
r = y
B = matrix(nrow = nlam, ncol = p + 1)
# Triple nested loop
for (m in 1:nlam) {
lam = 2 * n * lam.seq[m]
for (step in 1:maxit) {
for (j in 1:p) {
r = r + (Xs[, j] * b[j])
b[j] = one_var_lasso(r, Xs[, j], lam)
r = r - Xs[, j] * b[j]
}
}
B[m, ] = c(0, b)
}
##############################
# YOUR CODE:
# Scale back the coefficients;
# Update the intercepts stored in B[, 1]
##############################
x.col_vals = x.column.means / x.column.sd_vals
# Scale back the coefficients;
B[, -1] = t(t(B[, -1]) / x.column.sd_vals)
# Update the intercepts stored in B[, 1]
B[, 1] = y.mean - B[,-1] %*% x.col_vals
# for (m in 1:nlam) {
#     B[m, 1] = y.mean - sum(B[m, ])
# }
t(B)
}
one_var_lasso = function(r, x, lam) {
xx = sum(x^2)
xr = sum(r * x)
b = (abs(xr) - lam/2)/xx
b = sign(xr) * ifelse(b > 0, b, 0)
return(b)
}
lam.seq = exp(seq(-1, -8, length.out = 80))
myout = MyLasso(X, y, lam.seq, maxit = 100)
rownames(myout) = c("Intercept", colnames(X))
dim(myout)
x.index = log(lam.seq)
beta = myout[-1, ]  # beta is a 13-by-80 matrix
matplot(x.index, t(beta),
xlim = c(min(x.index), max(x.index)),
lty = 1,
xlab = "Log Lambda",
ylab = "Coefficients",
type="l",
lwd = 1)
# You can add variable names to each path
var.names = colnames(X)
nvar = length(var.names)
xpos = rep(min(x.index), nvar)
ypos = beta[, ncol(beta)]
text(xpos, ypos, var.names, cex=0.5, pos=2)
library(glmnet)
lasso.fit = glmnet(X, y, alpha = 1, lambda = lam.seq)
# coef(lasso.fit)
write.csv(as.matrix(coef(lasso.fit)), file = "Coding2_lasso_coefs.csv",
row.names = FALSE)
max(abs(coef(lasso.fit) - myout))
abs(coef(lasso.fit) - myout)
```{r}
